"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenPay API
 * super charge your subscription management.
 *
 * The version of the OpenAPI document: 1.2.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomersApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class CustomersApi extends runtime.BaseAPI {
    /**
     * Create Customer
     */
    createCustomerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['createCustomerRequest'] == null) {
                throw new runtime.RequiredError('createCustomerRequest', 'Required parameter "createCustomerRequest" was null or undefined when calling createCustomer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateCustomerRequestToJSON)(requestParameters['createCustomerRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CustomerExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Create Customer
     */
    createCustomer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createCustomerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Each customer has a Balance value, which denotes a debit or credit that\'s automatically applied to their next invoice upon finalization. Creates an immutable transaction that updates the customer\'s credit balance.
     * Create Customer Balance Transaction
     */
    createCustomerBalanceTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['customerId'] == null) {
                throw new runtime.RequiredError('customerId', 'Required parameter "customerId" was null or undefined when calling createCustomerBalanceTransaction().');
            }
            if (requestParameters['createCustomerBalanceTransactionRequest'] == null) {
                throw new runtime.RequiredError('createCustomerBalanceTransactionRequest', 'Required parameter "createCustomerBalanceTransactionRequest" was null or undefined when calling createCustomerBalanceTransaction().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{customer_id}/balance-transactions`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateCustomerBalanceTransactionRequestToJSON)(requestParameters['createCustomerBalanceTransactionRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CustomerBalanceTransactionExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Each customer has a Balance value, which denotes a debit or credit that\'s automatically applied to their next invoice upon finalization. Creates an immutable transaction that updates the customer\'s credit balance.
     * Create Customer Balance Transaction
     */
    createCustomerBalanceTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createCustomerBalanceTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Customer Discount
     */
    deleteCustomerDiscountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['customerId'] == null) {
                throw new runtime.RequiredError('customerId', 'Required parameter "customerId" was null or undefined when calling deleteCustomerDiscount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{customer_id}/discount`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CustomerExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Delete Customer Discount
     */
    deleteCustomerDiscount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCustomerDiscountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Customer
     */
    getCustomerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['customerId'] == null) {
                throw new runtime.RequiredError('customerId', 'Required parameter "customerId" was null or undefined when calling getCustomer().');
            }
            const queryParameters = {};
            if (requestParameters['expand'] != null) {
                queryParameters['expand'] = requestParameters['expand'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{customer_id}`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CustomerExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Get Customer
     */
    getCustomer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCustomerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Customer Balance Transaction
     */
    getCustomerBalanceTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['customerId'] == null) {
                throw new runtime.RequiredError('customerId', 'Required parameter "customerId" was null or undefined when calling getCustomerBalanceTransaction().');
            }
            if (requestParameters['transactionId'] == null) {
                throw new runtime.RequiredError('transactionId', 'Required parameter "transactionId" was null or undefined when calling getCustomerBalanceTransaction().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{customer_id}/balance-transactions/{transaction_id}`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId']))).replace(`{${"transaction_id"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CustomerBalanceTransactionExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Get Customer Balance Transaction
     */
    getCustomerBalanceTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCustomerBalanceTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Customer Balance Transactions
     */
    getCustomerBalanceTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['customerId'] == null) {
                throw new runtime.RequiredError('customerId', 'Required parameter "customerId" was null or undefined when calling getCustomerBalanceTransactions().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{customer_id}/balance-transactions`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.CustomerBalanceTransactionExternalFromJSON));
        });
    }
    /**
     * Get Customer Balance Transactions
     */
    getCustomerBalanceTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCustomerBalanceTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves payment methods for a given customer. Can optionally filter by payment provider type.
     * List Customer Payment Methods
     */
    listCustomerPaymentMethodsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['customerId'] == null) {
                throw new runtime.RequiredError('customerId', 'Required parameter "customerId" was null or undefined when calling listCustomerPaymentMethods().');
            }
            if (requestParameters['customerPaymentMethodQueryParams'] == null) {
                throw new runtime.RequiredError('customerPaymentMethodQueryParams', 'Required parameter "customerPaymentMethodQueryParams" was null or undefined when calling listCustomerPaymentMethods().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{customer_id}/payment-methods`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CustomerPaymentMethodQueryParamsToJSON)(requestParameters['customerPaymentMethodQueryParams']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListResponseUnionTokenizedCreditCardExternalPaymentMethodExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves payment methods for a given customer. Can optionally filter by payment provider type.
     * List Customer Payment Methods
     */
    listCustomerPaymentMethods(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listCustomerPaymentMethodsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Customers
     */
    listCustomersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['customerQueryParams'] == null) {
                throw new runtime.RequiredError('customerQueryParams', 'Required parameter "customerQueryParams" was null or undefined when calling listCustomers().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/list`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CustomerQueryParamsToJSON)(requestParameters['customerQueryParams']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListResponseCustomerExternalFromJSON)(jsonValue));
        });
    }
    /**
     * List Customers
     */
    listCustomers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listCustomersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lists valid subscriptions for given product_id or price_id. All \'active\' or \'trialing\' subscriptions are considered to be valid.
     * List Valid Subscriptions
     */
    listValidSubscriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['customerId'] == null) {
                throw new runtime.RequiredError('customerId', 'Required parameter "customerId" was null or undefined when calling listValidSubscriptions().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{customer_id}/list_valid_subscriptions`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ListActiveSubParamsToJSON)(requestParameters['listActiveSubParams']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ActiveSubResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Lists valid subscriptions for given product_id or price_id. All \'active\' or \'trialing\' subscriptions are considered to be valid.
     * List Valid Subscriptions
     */
    listValidSubscriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listValidSubscriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Customer
     */
    updateCustomerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['customerExternalId'] == null) {
                throw new runtime.RequiredError('customerExternalId', 'Required parameter "customerExternalId" was null or undefined when calling updateCustomer().');
            }
            if (requestParameters['updateCustomerRequest'] == null) {
                throw new runtime.RequiredError('updateCustomerRequest', 'Required parameter "updateCustomerRequest" was null or undefined when calling updateCustomer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{customer_external_id}`.replace(`{${"customer_external_id"}}`, encodeURIComponent(String(requestParameters['customerExternalId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.UpdateCustomerRequestToJSON)(requestParameters['updateCustomerRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CustomerExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Update Customer
     */
    updateCustomer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateCustomerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.CustomersApi = CustomersApi;
