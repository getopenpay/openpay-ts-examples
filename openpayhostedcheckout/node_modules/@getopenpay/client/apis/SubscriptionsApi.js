"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenPay API
 * super charge your subscription management.
 *
 * The version of the OpenAPI document: 1.2.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionsApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class SubscriptionsApi extends runtime.BaseAPI {
    /**
     * Cancels the trial of a subscription immediately and active the subscription effective from now. Invoice will be generated for the updated subscription interval.
     * Cancel Subscription Trial
     */
    cancelSubscriptionTrialRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionId'] == null) {
                throw new runtime.RequiredError('subscriptionId', 'Required parameter "subscriptionId" was null or undefined when calling cancelSubscriptionTrial().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscriptions/{subscription_id}/cancel-subscription-trial`.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Cancels the trial of a subscription immediately and active the subscription effective from now. Invoice will be generated for the updated subscription interval.
     * Cancel Subscription Trial
     */
    cancelSubscriptionTrial(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cancelSubscriptionTrialRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This is the PUBLIC create subs endpoint. This is intended to be used for manual creation of subscriptions, i.e. outside of the context of a checkout session. For subs creation that is part of a checkout flow, please use the internal create subs endpoint.
     * Create Subscriptions
     */
    createSubscriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['createSubscriptionRequest'] == null) {
                throw new runtime.RequiredError('createSubscriptionRequest', 'Required parameter "createSubscriptionRequest" was null or undefined when calling createSubscriptions().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscriptions/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateSubscriptionRequestToJSON)(requestParameters['createSubscriptionRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreateSubscriptionResponseFromJSON)(jsonValue));
        });
    }
    /**
     * This is the PUBLIC create subs endpoint. This is intended to be used for manual creation of subscriptions, i.e. outside of the context of a checkout session. For subs creation that is part of a checkout flow, please use the internal create subs endpoint.
     * Create Subscriptions
     */
    createSubscriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createSubscriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Subscription
     */
    deleteSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionId'] == null) {
                throw new runtime.RequiredError('subscriptionId', 'Required parameter "subscriptionId" was null or undefined when calling deleteSubscription().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscriptions/{subscription_id}`.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DeleteSubscriptionRequestToJSON)(requestParameters['deleteSubscriptionRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DeleteSubscriptionResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Delete Subscription
     */
    deleteSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Subscription Discount
     */
    deleteSubscriptionDiscountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionId'] == null) {
                throw new runtime.RequiredError('subscriptionId', 'Required parameter "subscriptionId" was null or undefined when calling deleteSubscriptionDiscount().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscriptions/{subscription_id}/discount`.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Delete Subscription Discount
     */
    deleteSubscriptionDiscount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteSubscriptionDiscountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Subscription
     */
    getSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionId'] == null) {
                throw new runtime.RequiredError('subscriptionId', 'Required parameter "subscriptionId" was null or undefined when calling getSubscription().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscriptions/{subscription_id}`.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Get Subscription
     */
    getSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Subscriptions
     */
    listSubscriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionQueryParams'] == null) {
                throw new runtime.RequiredError('subscriptionQueryParams', 'Required parameter "subscriptionQueryParams" was null or undefined when calling listSubscriptions().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscriptions/list`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SubscriptionQueryParamsToJSON)(requestParameters['subscriptionQueryParams']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListResponseSubscriptionExternalFromJSON)(jsonValue));
        });
    }
    /**
     * List Subscriptions
     */
    listSubscriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listSubscriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Pause Subscription
     */
    pauseSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionId'] == null) {
                throw new runtime.RequiredError('subscriptionId', 'Required parameter "subscriptionId" was null or undefined when calling pauseSubscription().');
            }
            if (requestParameters['subscriptionPauseRequest'] == null) {
                throw new runtime.RequiredError('subscriptionPauseRequest', 'Required parameter "subscriptionPauseRequest" was null or undefined when calling pauseSubscription().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscriptions/{subscription_id}/pause`.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SubscriptionPauseRequestToJSON)(requestParameters['subscriptionPauseRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Pause Subscription
     */
    pauseSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pauseSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Refresh Subscription Status
     */
    refreshSubscriptionStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionId'] == null) {
                throw new runtime.RequiredError('subscriptionId', 'Required parameter "subscriptionId" was null or undefined when calling refreshSubscriptionStatus().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscriptions/{subscription_id}/refresh-status`.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Refresh Subscription Status
     */
    refreshSubscriptionStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.refreshSubscriptionStatusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Resume Subscription
     */
    resumeSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionId'] == null) {
                throw new runtime.RequiredError('subscriptionId', 'Required parameter "subscriptionId" was null or undefined when calling resumeSubscription().');
            }
            if (requestParameters['subscriptionResumeRequest'] == null) {
                throw new runtime.RequiredError('subscriptionResumeRequest', 'Required parameter "subscriptionResumeRequest" was null or undefined when calling resumeSubscription().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscriptions/{subscription_id}/resume`.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SubscriptionResumeRequestToJSON)(requestParameters['subscriptionResumeRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ResumeSubscriptionResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Resume Subscription
     */
    resumeSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.resumeSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Subscription
     */
    updateSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionId'] == null) {
                throw new runtime.RequiredError('subscriptionId', 'Required parameter "subscriptionId" was null or undefined when calling updateSubscription().');
            }
            if (requestParameters['updateSubscriptionRequest'] == null) {
                throw new runtime.RequiredError('updateSubscriptionRequest', 'Required parameter "updateSubscriptionRequest" was null or undefined when calling updateSubscription().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscriptions/{subscription_id}`.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.UpdateSubscriptionRequestToJSON)(requestParameters['updateSubscriptionRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UpdateSubscriptionResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Update Subscription
     */
    updateSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.SubscriptionsApi = SubscriptionsApi;
