"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenPay API
 * super charge your subscription management.
 *
 * The version of the OpenAPI document: 1.2.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionItemsApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class SubscriptionItemsApi extends runtime.BaseAPI {
    /**
     * Adds a new item to an existing subscription. No existing items will be changed or replaced.
     * Create Subscription Item
     */
    createSubscriptionItemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['createSubscriptionItemRequest'] == null) {
                throw new runtime.RequiredError('createSubscriptionItemRequest', 'Required parameter "createSubscriptionItemRequest" was null or undefined when calling createSubscriptionItem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscription-items/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateSubscriptionItemRequestToJSON)(requestParameters['createSubscriptionItemRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionItemExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Adds a new item to an existing subscription. No existing items will be changed or replaced.
     * Create Subscription Item
     */
    createSubscriptionItem(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createSubscriptionItemRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes an item from the subscription. Removing a subscription item  from a subscription will not cancel the subscription. Default behaviour is to remove the subscription item at time of  renewing the subscription at next billing cycle. You can override  the behaviour by setting cancel_at_end as False. After successful call to this method with drop_at_end as True,  if you want to clear the flag, use update call with drop_at_end as False.
     * Delete Subscription Item
     */
    deleteSubscriptionItemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionItemId'] == null) {
                throw new runtime.RequiredError('subscriptionItemId', 'Required parameter "subscriptionItemId" was null or undefined when calling deleteSubscriptionItem().');
            }
            if (requestParameters['deleteSubscriptionItemRequest'] == null) {
                throw new runtime.RequiredError('deleteSubscriptionItemRequest', 'Required parameter "deleteSubscriptionItemRequest" was null or undefined when calling deleteSubscriptionItem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscription-items/{subscription_item_id}`.replace(`{${"subscription_item_id"}}`, encodeURIComponent(String(requestParameters['subscriptionItemId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DeleteSubscriptionItemRequestToJSON)(requestParameters['deleteSubscriptionItemRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DeleteSubscriptionItemResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Deletes an item from the subscription. Removing a subscription item  from a subscription will not cancel the subscription. Default behaviour is to remove the subscription item at time of  renewing the subscription at next billing cycle. You can override  the behaviour by setting cancel_at_end as False. After successful call to this method with drop_at_end as True,  if you want to clear the flag, use update call with drop_at_end as False.
     * Delete Subscription Item
     */
    deleteSubscriptionItem(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteSubscriptionItemRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Subscription Item
     */
    getSubscriptionItemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionItemId'] == null) {
                throw new runtime.RequiredError('subscriptionItemId', 'Required parameter "subscriptionItemId" was null or undefined when calling getSubscriptionItem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscription-items/{subscription_item_id}`.replace(`{${"subscription_item_id"}}`, encodeURIComponent(String(requestParameters['subscriptionItemId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionItemExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Get Subscription Item
     */
    getSubscriptionItem(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSubscriptionItemRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Subscription Items
     */
    listSubscriptionItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionItemQueryParams'] == null) {
                throw new runtime.RequiredError('subscriptionItemQueryParams', 'Required parameter "subscriptionItemQueryParams" was null or undefined when calling listSubscriptionItems().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscription-items/list`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SubscriptionItemQueryParamsToJSON)(requestParameters['subscriptionItemQueryParams']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListResponseSubscriptionItemExternalFromJSON)(jsonValue));
        });
    }
    /**
     * List Subscription Items
     */
    listSubscriptionItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listSubscriptionItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Subscription Item
     */
    updateSubscriptionItemRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['subscriptionItemId'] == null) {
                throw new runtime.RequiredError('subscriptionItemId', 'Required parameter "subscriptionItemId" was null or undefined when calling updateSubscriptionItem().');
            }
            if (requestParameters['updateSubscriptionItemRequest'] == null) {
                throw new runtime.RequiredError('updateSubscriptionItemRequest', 'Required parameter "updateSubscriptionItemRequest" was null or undefined when calling updateSubscriptionItem().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/subscription-items/{subscription_item_id}`.replace(`{${"subscription_item_id"}}`, encodeURIComponent(String(requestParameters['subscriptionItemId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.UpdateSubscriptionItemRequestToJSON)(requestParameters['updateSubscriptionItemRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SubscriptionItemExternalFromJSON)(jsonValue));
        });
    }
    /**
     * Update Subscription Item
     */
    updateSubscriptionItem(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateSubscriptionItemRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.SubscriptionItemsApi = SubscriptionItemsApi;
