"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenPay API
 * super charge your subscription management.
 *
 * The version of the OpenAPI document: 1.2.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentProviderType = void 0;
exports.instanceOfPaymentProviderType = instanceOfPaymentProviderType;
exports.PaymentProviderTypeFromJSON = PaymentProviderTypeFromJSON;
exports.PaymentProviderTypeFromJSONTyped = PaymentProviderTypeFromJSONTyped;
exports.PaymentProviderTypeToJSON = PaymentProviderTypeToJSON;
exports.PaymentProviderTypeToJSONTyped = PaymentProviderTypeToJSONTyped;
/**
 * Not to be confused with PaymentProcessor, this type is used in PaymentMethod
 * which are methods that are visible to customer (i.e. customer has an option to
 * pay with these different providers).
 * @export
 */
exports.PaymentProviderType = {
    AbstractBase: '_abstract_base',
    Ach: 'ach',
    ApplePay: 'apple_pay',
    CreditCard: 'credit_card',
    GooglePay: 'google_pay',
    StripeLink: 'stripe_link',
    Paypal: 'paypal',
    Crypto: 'crypto'
};
function instanceOfPaymentProviderType(value) {
    for (const key in exports.PaymentProviderType) {
        if (Object.prototype.hasOwnProperty.call(exports.PaymentProviderType, key)) {
            if (exports.PaymentProviderType[key] === value) {
                return true;
            }
        }
    }
    return false;
}
function PaymentProviderTypeFromJSON(json) {
    return PaymentProviderTypeFromJSONTyped(json, false);
}
function PaymentProviderTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
}
function PaymentProviderTypeToJSON(value) {
    return value;
}
function PaymentProviderTypeToJSONTyped(value, ignoreDiscriminator) {
    return value;
}
