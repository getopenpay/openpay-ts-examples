"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenPay API
 * super charge your subscription management.
 *
 * The version of the OpenAPI document: 1.2.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventType = void 0;
exports.instanceOfEventType = instanceOfEventType;
exports.EventTypeFromJSON = EventTypeFromJSON;
exports.EventTypeFromJSONTyped = EventTypeFromJSONTyped;
exports.EventTypeToJSON = EventTypeToJSON;
exports.EventTypeToJSONTyped = EventTypeToJSONTyped;
/**
 *
 * @export
 */
exports.EventType = {
    All: 'all',
    AccountCreated: 'account.created',
    AccountUpdated: 'account.updated',
    AccountDeleted: 'account.deleted',
    ApiTokenCreated: 'api_token.created',
    ApiTokenUpdated: 'api_token.updated',
    ApiTokenDeleted: 'api_token.deleted',
    ChargeCreated: 'charge.created',
    ChargeUpdated: 'charge.updated',
    ChargeDeleted: 'charge.deleted',
    ChargeSucceeded: 'charge.succeeded',
    ChargeFailed: 'charge.failed',
    ChargePending: 'charge.pending',
    ChargeRefunded: 'charge.refunded',
    CouponCreated: 'coupon.created',
    CouponUpdated: 'coupon.updated',
    CouponDeleted: 'coupon.deleted',
    CreditNoteCreated: 'credit_note.created',
    CreditNoteUpdated: 'credit_note.updated',
    CreditNoteDeleted: 'credit_note.deleted',
    CustomerCreated: 'customer.created',
    CustomerUpdated: 'customer.updated',
    CustomerDeleted: 'customer.deleted',
    CustomerBalanceTransactionCreated: 'customer_balance_transaction.created',
    CustomerBalanceTransactionUpdated: 'customer_balance_transaction.updated',
    CustomerBalanceTransactionDeleted: 'customer_balance_transaction.deleted',
    DiscountCreated: 'discount.created',
    DiscountUpdated: 'discount.updated',
    DiscountDeleted: 'discount.deleted',
    InviteCreated: 'invite.created',
    InviteUpdated: 'invite.updated',
    InviteDeleted: 'invite.deleted',
    InviteItemDiscountCreated: 'invite_item_discount.created',
    InviteItemDiscountUpdated: 'invite_item_discount.updated',
    InviteItemDiscountDeleted: 'invite_item_discount.deleted',
    InvoiceCreated: 'invoice.created',
    InvoiceUpdated: 'invoice.updated',
    InvoiceFinalized: 'invoice.finalized',
    InvoicePaid: 'invoice.paid',
    InvoicePastDue: 'invoice.past_due',
    InvoiceVoided: 'invoice.voided',
    InvoiceUncollectible: 'invoice.uncollectible',
    InvoiceDeleted: 'invoice.deleted',
    InvoiceUpcoming: 'invoice.upcoming',
    InvoiceDiscountCreated: 'invoice_discount.created',
    InvoiceDiscountUpdated: 'invoice_discount.updated',
    InvoiceDiscountDeleted: 'invoice_discount.deleted',
    InvoiceItemCreated: 'invoice_item.created',
    InvoiceItemUpdated: 'invoice_item.updated',
    InvoiceItemDeleted: 'invoice_item.deleted',
    PaymentIntentCreated: 'payment_intent.created',
    PaymentIntentUpdated: 'payment_intent.updated',
    PaymentIntentDeleted: 'payment_intent.deleted',
    PaymentIntentSucceeded: 'payment_intent.succeeded',
    PaymentIntentProcessing: 'payment_intent.processing',
    PaymentIntentRequiresAction: 'payment_intent.requires_action',
    PaymentIntentFailed: 'payment_intent.failed',
    PaymentMethodCreated: 'payment_method.created',
    PaymentMethodUpdated: 'payment_method.updated',
    PaymentMethodDeleted: 'payment_method.deleted',
    PaymentProcessorCreated: 'payment_processor.created',
    PaymentProcessorUpdated: 'payment_processor.updated',
    PaymentProcessorDeleted: 'payment_processor.deleted',
    PriceCreated: 'price.created',
    PriceUpdated: 'price.updated',
    PriceDeleted: 'price.deleted',
    ProductCreated: 'product.created',
    ProductUpdated: 'product.updated',
    ProductDeleted: 'product.deleted',
    PromotionCodeCreated: 'promotion_code.created',
    PromotionCodeUpdated: 'promotion_code.updated',
    PromotionCodeDeleted: 'promotion_code.deleted',
    RefundCreated: 'refund.created',
    RefundUpdated: 'refund.updated',
    RefundDeleted: 'refund.deleted',
    CustomerSubscriptionCreated: 'customer.subscription.created',
    CustomerSubscriptionUpdated: 'customer.subscription.updated',
    CustomerSubscriptionDeleted: 'customer.subscription.deleted',
    CustomerSubscriptionCanceled: 'customer.subscription.canceled',
    CustomerSubscriptionActivated: 'customer.subscription.activated',
    CustomerSubscriptionPaused: 'customer.subscription.paused',
    CustomerSubscriptionResumed: 'customer.subscription.resumed',
    CustomerSubscriptionPastDue: 'customer.subscription.past_due',
    CustomerSubscriptionTrialing: 'customer.subscription.trialing',
    CustomerSubscriptionTrialWillEnd: 'customer.subscription.trial_will_end',
    SubscriptionItemCreated: 'subscription_item.created',
    SubscriptionItemUpdated: 'subscription_item.updated',
    SubscriptionItemDeleted: 'subscription_item.deleted',
    UserCreated: 'user.created',
    UserUpdated: 'user.updated',
    UserDeleted: 'user.deleted',
    UserLoginCreated: 'user_login.created',
    UserLoginUpdated: 'user_login.updated',
    UserLoginDeleted: 'user_login.deleted',
    UserRecordCreated: 'user_record.created',
    UserRecordUpdated: 'user_record.updated',
    UserRecordDeleted: 'user_record.deleted',
    UserRecordSummaryCreated: 'user_record_summary.created',
    UserRecordSummaryUpdated: 'user_record_summary.updated',
    UserRecordSummaryDeleted: 'user_record_summary.deleted',
    WebhookEndpointCreated: 'webhook_endpoint.created',
    WebhookEndpointUpdated: 'webhook_endpoint.updated',
    WebhookEndpointDeleted: 'webhook_endpoint.deleted',
    CheckoutSessionCreated: 'checkout_session.created',
    CheckoutSessionCompleted: 'checkout_session.completed',
    CheckoutSessionExpired: 'checkout_session.expired'
};
function instanceOfEventType(value) {
    for (const key in exports.EventType) {
        if (Object.prototype.hasOwnProperty.call(exports.EventType, key)) {
            if (exports.EventType[key] === value) {
                return true;
            }
        }
    }
    return false;
}
function EventTypeFromJSON(json) {
    return EventTypeFromJSONTyped(json, false);
}
function EventTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
}
function EventTypeToJSON(value) {
    return value;
}
function EventTypeToJSONTyped(value, ignoreDiscriminator) {
    return value;
}
