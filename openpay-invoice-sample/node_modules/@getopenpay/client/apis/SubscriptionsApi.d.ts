/**
 * OpenPay API
 * super charge your subscription management.
 *
 * The version of the OpenAPI document: 1.2.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CreateSubscriptionRequest, CreateSubscriptionResponse, DeleteSubscriptionRequest, DeleteSubscriptionResponse, ListResponseSubscriptionExternal, ResumeSubscriptionResponse, SubscriptionExternal, SubscriptionPauseRequest, SubscriptionQueryParams, SubscriptionResumeRequest, UpdateSubscriptionRequest, UpdateSubscriptionResponse } from '../models/index';
export interface CancelSubscriptionTrialRequest {
    subscriptionId: string;
}
export interface CreateSubscriptionsRequest {
    createSubscriptionRequest: CreateSubscriptionRequest;
}
export interface DeleteSubscriptionOperationRequest {
    subscriptionId: string;
    deleteSubscriptionRequest?: DeleteSubscriptionRequest;
}
export interface DeleteSubscriptionDiscountRequest {
    subscriptionId: string;
}
export interface GetSubscriptionRequest {
    subscriptionId: string;
}
export interface ListSubscriptionsRequest {
    subscriptionQueryParams: SubscriptionQueryParams;
}
export interface PauseSubscriptionRequest {
    subscriptionId: string;
    subscriptionPauseRequest: SubscriptionPauseRequest;
}
export interface RefreshSubscriptionStatusRequest {
    subscriptionId: string;
}
export interface ResumeSubscriptionRequest {
    subscriptionId: string;
    subscriptionResumeRequest: SubscriptionResumeRequest;
}
export interface UpdateSubscriptionOperationRequest {
    subscriptionId: string;
    updateSubscriptionRequest: UpdateSubscriptionRequest;
}
/**
 *
 */
export declare class SubscriptionsApi extends runtime.BaseAPI {
    /**
     * Cancels the trial of a subscription immediately and active the subscription effective from now. Invoice will be generated for the updated subscription interval.
     * Cancel Subscription Trial
     */
    cancelSubscriptionTrialRaw(requestParameters: CancelSubscriptionTrialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionExternal>>;
    /**
     * Cancels the trial of a subscription immediately and active the subscription effective from now. Invoice will be generated for the updated subscription interval.
     * Cancel Subscription Trial
     */
    cancelSubscriptionTrial(requestParameters: CancelSubscriptionTrialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionExternal>;
    /**
     * This is the PUBLIC create subs endpoint. This is intended to be used for manual creation of subscriptions, i.e. outside of the context of a checkout session. For subs creation that is part of a checkout flow, please use the internal create subs endpoint.
     * Create Subscriptions
     */
    createSubscriptionsRaw(requestParameters: CreateSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSubscriptionResponse>>;
    /**
     * This is the PUBLIC create subs endpoint. This is intended to be used for manual creation of subscriptions, i.e. outside of the context of a checkout session. For subs creation that is part of a checkout flow, please use the internal create subs endpoint.
     * Create Subscriptions
     */
    createSubscriptions(requestParameters: CreateSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSubscriptionResponse>;
    /**
     * Delete Subscription
     */
    deleteSubscriptionRaw(requestParameters: DeleteSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSubscriptionResponse>>;
    /**
     * Delete Subscription
     */
    deleteSubscription(requestParameters: DeleteSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSubscriptionResponse>;
    /**
     * Delete Subscription Discount
     */
    deleteSubscriptionDiscountRaw(requestParameters: DeleteSubscriptionDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionExternal>>;
    /**
     * Delete Subscription Discount
     */
    deleteSubscriptionDiscount(requestParameters: DeleteSubscriptionDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionExternal>;
    /**
     * Get Subscription
     */
    getSubscriptionRaw(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionExternal>>;
    /**
     * Get Subscription
     */
    getSubscription(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionExternal>;
    /**
     * List Subscriptions
     */
    listSubscriptionsRaw(requestParameters: ListSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseSubscriptionExternal>>;
    /**
     * List Subscriptions
     */
    listSubscriptions(requestParameters: ListSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseSubscriptionExternal>;
    /**
     * Pause Subscription
     */
    pauseSubscriptionRaw(requestParameters: PauseSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionExternal>>;
    /**
     * Pause Subscription
     */
    pauseSubscription(requestParameters: PauseSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionExternal>;
    /**
     * Refresh Subscription Status
     */
    refreshSubscriptionStatusRaw(requestParameters: RefreshSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionExternal>>;
    /**
     * Refresh Subscription Status
     */
    refreshSubscriptionStatus(requestParameters: RefreshSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionExternal>;
    /**
     * Resume Subscription
     */
    resumeSubscriptionRaw(requestParameters: ResumeSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResumeSubscriptionResponse>>;
    /**
     * Resume Subscription
     */
    resumeSubscription(requestParameters: ResumeSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResumeSubscriptionResponse>;
    /**
     * Update Subscription
     */
    updateSubscriptionRaw(requestParameters: UpdateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateSubscriptionResponse>>;
    /**
     * Update Subscription
     */
    updateSubscription(requestParameters: UpdateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateSubscriptionResponse>;
}
