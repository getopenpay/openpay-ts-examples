"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenPay API
 * super charge your subscription management.
 *
 * The version of the OpenAPI document: 1.2.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfRefundExternal = instanceOfRefundExternal;
exports.RefundExternalFromJSON = RefundExternalFromJSON;
exports.RefundExternalFromJSONTyped = RefundExternalFromJSONTyped;
exports.RefundExternalToJSON = RefundExternalToJSON;
exports.RefundExternalToJSONTyped = RefundExternalToJSONTyped;
const RefundStatusEnum_1 = require("./RefundStatusEnum");
const CurrencyEnum_1 = require("./CurrencyEnum");
const ObjectName_1 = require("./ObjectName");
const RefundReasonEnum_1 = require("./RefundReasonEnum");
/**
 * Check if a given object implements the RefundExternal interface.
 */
function instanceOfRefundExternal(value) {
    if (!('amountAtom' in value) || value['amountAtom'] === undefined)
        return false;
    if (!('chargeId' in value) || value['chargeId'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('invoiceId' in value) || value['invoiceId'] === undefined)
        return false;
    if (!('paymentIntentId' in value) || value['paymentIntentId'] === undefined)
        return false;
    if (!('reason' in value) || value['reason'] === undefined)
        return false;
    if (!('status' in value) || value['status'] === undefined)
        return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined)
        return false;
    return true;
}
function RefundExternalFromJSON(json) {
    return RefundExternalFromJSONTyped(json, false);
}
function RefundExternalFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'amountAtom': json['amount_atom'],
        'attemptErrorMessage': json['attempt_error_message'] == null ? undefined : json['attempt_error_message'],
        'chargeId': json['charge_id'],
        'createdAt': (new Date(json['created_at'])),
        'currency': json['currency'] == null ? undefined : (0, CurrencyEnum_1.CurrencyEnumFromJSON)(json['currency']),
        'id': json['id'],
        'invoiceId': json['invoice_id'],
        'isDeleted': json['is_deleted'] == null ? undefined : json['is_deleted'],
        'object': json['object'] == null ? undefined : (0, ObjectName_1.ObjectNameFromJSON)(json['object']),
        'paymentIntentId': json['payment_intent_id'],
        'reason': (0, RefundReasonEnum_1.RefundReasonEnumFromJSON)(json['reason']),
        'status': (0, RefundStatusEnum_1.RefundStatusEnumFromJSON)(json['status']),
        'updatedAt': (new Date(json['updated_at'])),
    };
}
function RefundExternalToJSON(json) {
    return RefundExternalToJSONTyped(json, false);
}
function RefundExternalToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'amount_atom': value['amountAtom'],
        'attempt_error_message': value['attemptErrorMessage'],
        'charge_id': value['chargeId'],
        'created_at': ((value['createdAt']).toISOString()),
        'currency': (0, CurrencyEnum_1.CurrencyEnumToJSON)(value['currency']),
        'id': value['id'],
        'invoice_id': value['invoiceId'],
        'is_deleted': value['isDeleted'],
        'object': (0, ObjectName_1.ObjectNameToJSON)(value['object']),
        'payment_intent_id': value['paymentIntentId'],
        'reason': (0, RefundReasonEnum_1.RefundReasonEnumToJSON)(value['reason']),
        'status': (0, RefundStatusEnum_1.RefundStatusEnumToJSON)(value['status']),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}
